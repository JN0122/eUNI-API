// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using eUNI_API.Data;

#nullable disable

namespace eUNI_API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241212233726_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("eUNI_API.Models.Entities.Auth.PasswordResetLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UsedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("PasswordResetLogs");
                });

            modelBuilder.Entity("eUNI_API.Models.Entities.Auth.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("eUNI_API.Models.Entities.Auth.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Student"
                        });
                });

            modelBuilder.Entity("eUNI_API.Models.Entities.Auth.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c49c2319-2e87-45fe-be3b-1d9e724df781"),
                            CreatedAt = new DateTime(2024, 12, 12, 23, 37, 26, 169, DateTimeKind.Utc).AddTicks(4690),
                            Email = "root@euni.com",
                            FirstName = "Jan",
                            IsDeleted = false,
                            LastName = "Kowalski",
                            PasswordHash = "NTWxiNrLLLT2HkXuG9JiPYN0z5UN2eHW5gMsxbP4ATY=",
                            RoleId = 1,
                            Salt = "mwmeU7TZlMdR/NMWAJMzrQ=="
                        });
                });

            modelBuilder.Entity("eUNI_API.Models.Entities.FieldOfStudy.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EndHourId")
                        .HasColumnType("integer");

                    b.Property<int>("FieldOfStudyLogId")
                        .HasColumnType("integer");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Room")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<int>("StartHourId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EndHourId");

                    b.HasIndex("FieldOfStudyLogId");

                    b.HasIndex("GroupId");

                    b.HasIndex("StartHourId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("eUNI_API.Models.Entities.FieldOfStudy.ClassDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("ClassDates");
                });

            modelBuilder.Entity("eUNI_API.Models.Entities.FieldOfStudy.FieldOfStudy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbr")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("IsFullTime")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<byte>("SemesterCount")
                        .HasColumnType("smallint");

                    b.Property<byte>("StudiesCycle")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("FieldOfStudies");
                });

            modelBuilder.Entity("eUNI_API.Models.Entities.FieldOfStudy.FieldOfStudyLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FieldOfStudyId")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizationsOfTheYearId")
                        .HasColumnType("integer");

                    b.Property<byte>("Semester")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("FieldOfStudyId");

                    b.HasIndex("OrganizationsOfTheYearId");

                    b.ToTable("FieldOfStudyLogs");
                });

            modelBuilder.Entity("eUNI_API.Models.Entities.OrganizationInfo.DayOff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Day")
                        .HasColumnType("date");

                    b.Property<int>("OrganizationsOfTheYearId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationsOfTheYearId");

                    b.ToTable("DaysOff");
                });

            modelBuilder.Entity("eUNI_API.Models.Entities.OrganizationInfo.Hour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<byte>("EndHour")
                        .HasColumnType("smallint");

                    b.Property<byte>("EndMinute")
                        .HasColumnType("smallint");

                    b.Property<byte>("StartHour")
                        .HasColumnType("smallint");

                    b.Property<byte>("StartMinute")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Hours");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndHour = (byte)8,
                            EndMinute = (byte)15,
                            StartHour = (byte)7,
                            StartMinute = (byte)30
                        },
                        new
                        {
                            Id = 2,
                            EndHour = (byte)9,
                            EndMinute = (byte)0,
                            StartHour = (byte)8,
                            StartMinute = (byte)15
                        },
                        new
                        {
                            Id = 3,
                            EndHour = (byte)10,
                            EndMinute = (byte)0,
                            StartHour = (byte)9,
                            StartMinute = (byte)15
                        },
                        new
                        {
                            Id = 4,
                            EndHour = (byte)10,
                            EndMinute = (byte)45,
                            StartHour = (byte)10,
                            StartMinute = (byte)0
                        },
                        new
                        {
                            Id = 5,
                            EndHour = (byte)11,
                            EndMinute = (byte)45,
                            StartHour = (byte)11,
                            StartMinute = (byte)0
                        },
                        new
                        {
                            Id = 6,
                            EndHour = (byte)12,
                            EndMinute = (byte)30,
                            StartHour = (byte)11,
                            StartMinute = (byte)45
                        },
                        new
                        {
                            Id = 7,
                            EndHour = (byte)13,
                            EndMinute = (byte)30,
                            StartHour = (byte)12,
                            StartMinute = (byte)45
                        },
                        new
                        {
                            Id = 8,
                            EndHour = (byte)14,
                            EndMinute = (byte)15,
                            StartHour = (byte)13,
                            StartMinute = (byte)30
                        },
                        new
                        {
                            Id = 9,
                            EndHour = (byte)15,
                            EndMinute = (byte)15,
                            StartHour = (byte)14,
                            StartMinute = (byte)30
                        },
                        new
                        {
                            Id = 10,
                            EndHour = (byte)16,
                            EndMinute = (byte)0,
                            StartHour = (byte)15,
                            StartMinute = (byte)15
                        },
                        new
                        {
                            Id = 11,
                            EndHour = (byte)17,
                            EndMinute = (byte)0,
                            StartHour = (byte)16,
                            StartMinute = (byte)15
                        },
                        new
                        {
                            Id = 12,
                            EndHour = (byte)17,
                            EndMinute = (byte)45,
                            StartHour = (byte)17,
                            StartMinute = (byte)0
                        },
                        new
                        {
                            Id = 13,
                            EndHour = (byte)18,
                            EndMinute = (byte)45,
                            StartHour = (byte)18,
                            StartMinute = (byte)0
                        },
                        new
                        {
                            Id = 14,
                            EndHour = (byte)19,
                            EndMinute = (byte)30,
                            StartHour = (byte)18,
                            StartMinute = (byte)45
                        },
                        new
                        {
                            Id = 15,
                            EndHour = (byte)20,
                            EndMinute = (byte)30,
                            StartHour = (byte)19,
                            StartMinute = (byte)45
                        },
                        new
                        {
                            Id = 16,
                            EndHour = (byte)21,
                            EndMinute = (byte)15,
                            StartHour = (byte)20,
                            StartMinute = (byte)30
                        });
                });

            modelBuilder.Entity("eUNI_API.Models.Entities.OrganizationInfo.OrganizationOfTheYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("EndDay")
                        .HasColumnType("date");

                    b.Property<bool>("FirstHalfOfYear")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("StartDay")
                        .HasColumnType("date");

                    b.Property<int>("YearId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("YearId");

                    b.ToTable("OrganizationsOfTheYear");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDay = new DateOnly(2025, 1, 26),
                            FirstHalfOfYear = true,
                            StartDay = new DateOnly(2024, 10, 1),
                            YearId = 1
                        });
                });

            modelBuilder.Entity("eUNI_API.Models.Entities.OrganizationInfo.Year", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.HasKey("Id");

                    b.ToTable("Years");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "2024/2025"
                        });
                });

            modelBuilder.Entity("eUNI_API.Models.Entities.Student.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbr")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbr = "P01",
                            Type = 2
                        },
                        new
                        {
                            Id = 2,
                            Abbr = "P02",
                            Type = 2
                        },
                        new
                        {
                            Id = 3,
                            Abbr = "P03",
                            Type = 2
                        },
                        new
                        {
                            Id = 4,
                            Abbr = "P04",
                            Type = 2
                        },
                        new
                        {
                            Id = 5,
                            Abbr = "P05",
                            Type = 2
                        },
                        new
                        {
                            Id = 6,
                            Abbr = "W",
                            Type = 0
                        },
                        new
                        {
                            Id = 7,
                            Abbr = "K01",
                            Type = 3
                        },
                        new
                        {
                            Id = 8,
                            Abbr = "K02",
                            Type = 3
                        },
                        new
                        {
                            Id = 9,
                            Abbr = "K03",
                            Type = 3
                        },
                        new
                        {
                            Id = 10,
                            Abbr = "K04",
                            Type = 3
                        },
                        new
                        {
                            Id = 11,
                            Abbr = "K05",
                            Type = 3
                        },
                        new
                        {
                            Id = 12,
                            Abbr = "L01",
                            Type = 4
                        },
                        new
                        {
                            Id = 13,
                            Abbr = "L02",
                            Type = 4
                        },
                        new
                        {
                            Id = 14,
                            Abbr = "L03",
                            Type = 4
                        },
                        new
                        {
                            Id = 15,
                            Abbr = "L04",
                            Type = 4
                        },
                        new
                        {
                            Id = 16,
                            Abbr = "L05",
                            Type = 4
                        },
                        new
                        {
                            Id = 17,
                            Abbr = "1",
                            Type = 1
                        },
                        new
                        {
                            Id = 18,
                            Abbr = "2",
                            Type = 1
                        },
                        new
                        {
                            Id = 19,
                            Abbr = "3",
                            Type = 1
                        },
                        new
                        {
                            Id = 20,
                            Abbr = "4",
                            Type = 1
                        });
                });

            modelBuilder.Entity("eUNI_API.Models.Entities.Student.StudentFieldsOfStudyLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FieldsOfStudyLogId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCurrentFieldOfStudy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRepresentative")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FieldsOfStudyLogId");

                    b.HasIndex("UserId");

                    b.ToTable("StudentFieldsOfStudyLogs");
                });

            modelBuilder.Entity("eUNI_API.Models.Entities.Student.StudentGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentsFieldsOfStudyLogId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("StudentsFieldsOfStudyLogId");

                    b.ToTable("StudentGroups");
                });

            modelBuilder.Entity("eUNI_API.Models.Entities.Auth.PasswordResetLog", b =>
                {
                    b.HasOne("eUNI_API.Models.Entities.Auth.User", "User")
                        .WithMany("PasswordResetLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("eUNI_API.Models.Entities.Auth.RefreshToken", b =>
                {
                    b.HasOne("eUNI_API.Models.Entities.Auth.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("eUNI_API.Models.Entities.Auth.User", b =>
                {
                    b.HasOne("eUNI_API.Models.Entities.Auth.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("eUNI_API.Models.Entities.FieldOfStudy.Class", b =>
                {
                    b.HasOne("eUNI_API.Models.Entities.OrganizationInfo.Hour", "EndHour")
                        .WithMany("ClassesEndHour")
                        .HasForeignKey("EndHourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eUNI_API.Models.Entities.FieldOfStudy.FieldOfStudyLog", "FieldOfStudyLog")
                        .WithMany("Classes")
                        .HasForeignKey("FieldOfStudyLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eUNI_API.Models.Entities.Student.Group", "Group")
                        .WithMany("Classes")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eUNI_API.Models.Entities.OrganizationInfo.Hour", "StartHour")
                        .WithMany("ClassesStartHour")
                        .HasForeignKey("StartHourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EndHour");

                    b.Navigation("FieldOfStudyLog");

                    b.Navigation("Group");

                    b.Navigation("StartHour");
                });

            modelBuilder.Entity("eUNI_API.Models.Entities.FieldOfStudy.ClassDate", b =>
                {
                    b.HasOne("eUNI_API.Models.Entities.FieldOfStudy.Class", "Class")
                        .WithMany("ClassDates")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("eUNI_API.Models.Entities.FieldOfStudy.FieldOfStudyLog", b =>
                {
                    b.HasOne("eUNI_API.Models.Entities.FieldOfStudy.FieldOfStudy", "FieldOfStudy")
                        .WithMany("FieldOfStudyLogs")
                        .HasForeignKey("FieldOfStudyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("eUNI_API.Models.Entities.OrganizationInfo.OrganizationOfTheYear", "OrganizationsOfTheYear")
                        .WithMany("FieldOfStudyLogs")
                        .HasForeignKey("OrganizationsOfTheYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FieldOfStudy");

                    b.Navigation("OrganizationsOfTheYear");
                });

            modelBuilder.Entity("eUNI_API.Models.Entities.OrganizationInfo.DayOff", b =>
                {
                    b.HasOne("eUNI_API.Models.Entities.OrganizationInfo.OrganizationOfTheYear", "OrganizationsOfTheYear")
                        .WithMany("DayOffs")
                        .HasForeignKey("OrganizationsOfTheYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrganizationsOfTheYear");
                });

            modelBuilder.Entity("eUNI_API.Models.Entities.OrganizationInfo.OrganizationOfTheYear", b =>
                {
                    b.HasOne("eUNI_API.Models.Entities.OrganizationInfo.Year", "Year")
                        .WithMany("OrganizationOfTheYears")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Year");
                });

            modelBuilder.Entity("eUNI_API.Models.Entities.Student.StudentFieldsOfStudyLog", b =>
                {
                    b.HasOne("eUNI_API.Models.Entities.FieldOfStudy.FieldOfStudyLog", "FieldsOfStudyLog")
                        .WithMany("StudentsFieldsOfStudyLog")
                        .HasForeignKey("FieldsOfStudyLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eUNI_API.Models.Entities.Auth.User", "User")
                        .WithMany("StudentFieldsOfStudyLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FieldsOfStudyLog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eUNI_API.Models.Entities.Student.StudentGroup", b =>
                {
                    b.HasOne("eUNI_API.Models.Entities.Student.Group", "Group")
                        .WithMany("StudentGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eUNI_API.Models.Entities.Student.StudentFieldsOfStudyLog", "StudentsFieldsOfStudyLog")
                        .WithMany("StudentGroups")
                        .HasForeignKey("StudentsFieldsOfStudyLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("StudentsFieldsOfStudyLog");
                });

            modelBuilder.Entity("eUNI_API.Models.Entities.Auth.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("eUNI_API.Models.Entities.Auth.User", b =>
                {
                    b.Navigation("PasswordResetLogs");

                    b.Navigation("RefreshTokens");

                    b.Navigation("StudentFieldsOfStudyLogs");
                });

            modelBuilder.Entity("eUNI_API.Models.Entities.FieldOfStudy.Class", b =>
                {
                    b.Navigation("ClassDates");
                });

            modelBuilder.Entity("eUNI_API.Models.Entities.FieldOfStudy.FieldOfStudy", b =>
                {
                    b.Navigation("FieldOfStudyLogs");
                });

            modelBuilder.Entity("eUNI_API.Models.Entities.FieldOfStudy.FieldOfStudyLog", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("StudentsFieldsOfStudyLog");
                });

            modelBuilder.Entity("eUNI_API.Models.Entities.OrganizationInfo.Hour", b =>
                {
                    b.Navigation("ClassesEndHour");

                    b.Navigation("ClassesStartHour");
                });

            modelBuilder.Entity("eUNI_API.Models.Entities.OrganizationInfo.OrganizationOfTheYear", b =>
                {
                    b.Navigation("DayOffs");

                    b.Navigation("FieldOfStudyLogs");
                });

            modelBuilder.Entity("eUNI_API.Models.Entities.OrganizationInfo.Year", b =>
                {
                    b.Navigation("OrganizationOfTheYears");
                });

            modelBuilder.Entity("eUNI_API.Models.Entities.Student.Group", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("StudentGroups");
                });

            modelBuilder.Entity("eUNI_API.Models.Entities.Student.StudentFieldsOfStudyLog", b =>
                {
                    b.Navigation("StudentGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
